<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Constants
teleportTime = 40;
teleportTimeRemaining = teleportTime;
global.inNightmare = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

//if (global.pause) exit;
var moveSpeed = 10; 
var pushModifier = 0.2;

// Get input 
var kLeft = -(keyboard_check(vk_left) || keyboard_check(ord('A'))); 
var kRight = keyboard_check(vk_right) || keyboard_check(ord('D')); 
var kUp = -(keyboard_check(vk_up) || keyboard_check(ord('W')));
var kDown = keyboard_check(vk_down) || keyboard_check(ord('S'));

var moveH = kLeft + kRight; 
var moveV = kUp + kDown;

if (moveH == 1) {
    sprite_index = sprPlayerRight;
} else if (moveH == -1) {
    sprite_index = sprPlayerLeft;
} else if (moveV == 1) {
    sprite_index = sprPlayerDown;
} else if (moveV == -1) {
    sprite_index = sprPlayerUp;
}

if (moveH != 0) {
    hMovesRemaining = moveSpeed;
    for (var i = 0; i &lt; hMovesRemaining; i++) {
        if (!place_meeting(x + moveH, y, objWall) &amp;&amp; !place_meeting(x + moveH, y, objBlock)) {
           x += moveH;
           hMovesRemaining -= 1;
        }
    }
    for (var i = 0; i &lt; floor(hMovesRemaining * pushModifier); i++) {
        
        var col_list = ds_list_create();
        var col = instance_place(x + moveH, y, objBlock);
        
        while col {
            ds_list_add(col_list, col);  //adds the instance ID of col to the list
            instance_deactivate_object(col);    //deactivates the colliding instance, excluding it from further collision detection
            col = instance_place(x + moveH, y, objBlock);
        }
        instance_activate_all(); //reactivate all the objects, so they don't disappear

        if (ds_list_size(col_list) &lt;= 1 &amp;&amp; !place_meeting(x + moveH, y, objWall)) {
            var canMove = false;
            var inst = instance_place(x + moveH, y, objBlock);
            with (inst) {
                if (!place_meeting(x + moveH, y, objWall) &amp;&amp; !place_meeting(x + moveH, y, objBlock)) {
                    x += moveH;
                    canMove = true;
                }
            }
            if (canMove) {
                x += moveH;
            }
        }

        ds_list_destroy(col_list);  //always destroy data structures after you are done using them  
    }
}


// Handle y
if (moveV != 0) {
    vMovesRemaining = moveSpeed;
    for (var i = 0; i &lt; moveSpeed; i++) {
        if (!place_meeting(x, y + moveV, objWall) &amp;&amp; !place_meeting(x, y + moveV, objBlock)) {
            y += moveV;
            vMovesRemaining -= 1;
        }
    }
    for (var i = 0; i &lt; floor(vMovesRemaining * pushModifier); i++) {
    
        var col_list = ds_list_create();
        var col = instance_place(x, y + moveV, objBlock);
        
        while col {
            ds_list_add(col_list, col);  //adds the instance ID of col to the list
            instance_deactivate_object(col);    //deactivates the colliding instance, excluding it from further collision detection
            col = instance_place(x, y + moveV, objBlock);
        }
        instance_activate_all(); //reactivate all the objects, so they don't disappear

        if (ds_list_size(col_list) &lt;= 1 &amp;&amp; !place_meeting(x, y + moveV, objWall)) {
            var canMove = false;
            var inst = instance_place(x, y + moveV, objBlock);
            with (inst) {
                if (!place_meeting(x, y + moveV, objWall) &amp;&amp; !place_meeting(x, y + moveV, objBlock)) {
                    y += moveV;
                    canMove = true;
                }
            }
            if (canMove) {
                y += moveV;
            }
        }

        ds_list_destroy(col_list);  //always destroy data structures after you are done using them  
    
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleportation

if (place_meeting(x, y, objTeleporter)) {
    teleportTimeRemaining -= 1;    
} else {
    teleportTimeRemaining = teleportTime;
}

if (teleportTimeRemaining == 0) {
    show_debug_message("Teleport");
    show_debug_message(global.inNightmare);

    if (global.inNightmare) {
        room_goto(0);
    } else {
        room_goto(1);
    }
    global.inNightmare = !global.inNightmare;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
